// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

// Eight RAM512 chips.
CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    DMux8Way(
        in=load,
        sel=address[0..2],
        a=loadRam0,
        b=loadRam1,
        c=loadRam2,
        d=loadRam3,
        e=loadRam4,
        f=loadRam5,
        g=loadRam6,
        h=loadRam7
    );
    
    // Use the three MSB to index the individual register in the RAM8 module being addressed.
    RAM64(in=in, load=loadRam0, address=address[3..11], out=ram0Out);
    RAM64(in=in, load=loadRam1, address=address[3..11], out=ram1Out);
    RAM64(in=in, load=loadRam2, address=address[3..11], out=ram2Out);
    RAM64(in=in, load=loadRam3, address=address[3..11], out=ram3Out);
    RAM64(in=in, load=loadRam4, address=address[3..11], out=ram4Out);
    RAM64(in=in, load=loadRam5, address=address[3..11], out=ram5Out);
    RAM64(in=in, load=loadRam6, address=address[3..11], out=ram6Out);
    RAM64(in=in, load=loadRam7, address=address[3..11], out=ram7Out);

    // Use the three LSB to output only the intended RAM chip's Register.
    Mux8Way16(
        a=ram0Out,
        b=ram1Out,
        c=ram2Out,
        d=ram3Out,
        e=ram4Out,
        f=ram5Out,
        g=ram6Out,
        h=ram7Out,
        sel=address[0..2],
        out=out
    );
}
